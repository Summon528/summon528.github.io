<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水泥城式</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://summon528.github.io/"/>
  <updated>2018-01-01T10:45:19.751Z</updated>
  <id>https://summon528.github.io/</id>
  
  <author>
    <name>Cody Tseng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[UVA] 796 - Critical Links</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-796-Critical-Links/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-796-Critical-Links/</id>
    <published>2018-01-01T10:44:28.000Z</published>
    <updated>2018-01-01T10:45:19.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=737" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=737</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>找橋</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Tarjan<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dfs_num, dfs_lo;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfs_num[t] = dfs_lo[t] = cnt++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[t]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs_num[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            dfs(t, i);</span><br><span class="line">            <span class="keyword">if</span> (dfs_lo[i] &gt; dfs_num[t]) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">                <span class="keyword">if</span> (t &gt; i) &#123;</span><br><span class="line">                    p = make_pair(i, t);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = make_pair(t, i);</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(p);</span><br><span class="line">            &#125;</span><br><span class="line">            dfs_lo[t] = min(dfs_lo[t], dfs_lo[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s != i) &#123;</span><br><span class="line">            dfs_lo[t] = min(dfs_lo[t], dfs_num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> s, t, k;</span><br><span class="line">        g.clear();</span><br><span class="line">        g.resize(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d (%d)"</span>, &amp;s, &amp;k);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">                g[s].push_back(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs_num.clear();</span><br><span class="line">        dfs_num.resize(n, <span class="number">-1</span>);</span><br><span class="line">        dfs_lo.clear();</span><br><span class="line">        dfs_lo.resize(n);</span><br><span class="line">        ans.clear();</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs_num[i] == <span class="number">-1</span>) dfs(<span class="number">-1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ans.begin(), ans.end());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d critical links\n"</span>, ans.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d - %d\n"</span>, i.first, i.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=737&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=737&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;找橋&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;Tarjan&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Graph" scheme="https://summon528.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 315 - Network</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-315-Network/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-315-Network/</id>
    <published>2018-01-01T10:42:36.000Z</published>
    <updated>2018-01-01T10:44:55.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=251" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=251</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>找節點</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Tarjan<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;g, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;dfs_lo,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;dfs_num, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;dfs_par, <span class="keyword">int</span> &amp;cnt,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;ans, <span class="keyword">int</span> &amp;root_kids, <span class="keyword">int</span> &amp;root)</span> </span>&#123;</span><br><span class="line">    dfs_lo[x] = dfs_num[x] = cnt++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs_num[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == root) root_kids++;</span><br><span class="line">            dfs_par[i] = x;</span><br><span class="line">            dfs(i, g, dfs_lo, dfs_num, dfs_par, cnt, ans, root_kids, root);</span><br><span class="line">            <span class="keyword">if</span> (dfs_lo[i] &gt;= dfs_num[x]) &#123;</span><br><span class="line">                ans[x] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs_lo[x] = min(dfs_lo[i], dfs_lo[x]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dfs_par[x] != i) &#123;</span><br><span class="line">            dfs_lo[x] = min(dfs_lo[x], dfs_num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g(n);</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m, m) &#123;</span><br><span class="line">            m--;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            getline(<span class="built_in">cin</span>, s);</span><br><span class="line">            <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="keyword">while</span> (ss &gt;&gt; tmp) g[m].push_back(tmp - <span class="number">1</span>), g[tmp - <span class="number">1</span>].push_back(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dfs_lo(n), dfs_num(n, <span class="number">-1</span>), dfs_par(n, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; ans(n);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs_num[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> root_kids = <span class="number">0</span>;</span><br><span class="line">                dfs(i, g, dfs_lo, dfs_num, dfs_par, cnt, ans, root_kids, i);</span><br><span class="line">                ans[i] = (root_kids &gt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "ans:" &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count(ans.begin(), ans.end(), <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=251&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=251&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;找節點&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;Tarjan&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Graph" scheme="https://summon528.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 11396 - Claw Decomposition</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-11396-Claw-Decomposition/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-11396-Claw-Decomposition/</id>
    <published>2018-01-01T10:40:55.000Z</published>
    <updated>2018-01-01T10:41:34.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2391" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2391</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>二分圖判斷<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; V, V) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g(V);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b, a | b) &#123;</span><br><span class="line">            a--, b--;</span><br><span class="line">            g[a].push_back(b);</span><br><span class="line">            g[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; color(V, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(<span class="number">0</span>);</span><br><span class="line">        color[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> bi = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; bi) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[tmp]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    color[i] = <span class="number">1</span> - color[tmp];</span><br><span class="line">                    q.push(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color[i] == color[tmp]) &#123;</span><br><span class="line">                    bi = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bi ? <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span> : <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2391&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2391&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;二分圖判斷&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[UVA] 11080 - Place the Guards</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-11080-Place-the-Guards/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-11080-Place-the-Guards/</id>
    <published>2018-01-01T10:39:29.000Z</published>
    <updated>2018-01-01T10:40:31.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2021" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2021</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>二分圖<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    T = int(input())</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(T):</span><br><span class="line">        v, e = map(int, input().split())</span><br><span class="line">        g = [[<span class="number">0</span>] * v <span class="keyword">for</span> _ <span class="keyword">in</span> range(v)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(e):</span><br><span class="line">            a, b = map(int, input().split())</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> g[a][b]:</span><br><span class="line">                g[a][b] = <span class="number">1</span></span><br><span class="line">                g[b][a] = <span class="number">1</span></span><br><span class="line">        color = [<span class="number">-1</span>] * v</span><br><span class="line">        check = <span class="keyword">True</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(color):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> item == <span class="number">-1</span>:</span><br><span class="line">                q = deque()</span><br><span class="line">                q.append(idx)</span><br><span class="line">                color[idx] = <span class="number">0</span></span><br><span class="line">                cnt = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                <span class="keyword">while</span> q <span class="keyword">and</span> check:</span><br><span class="line">                    tmp = q.popleft()</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(v):</span><br><span class="line">                        <span class="keyword">if</span> g[tmp][i]:</span><br><span class="line">                            <span class="keyword">if</span> color[i] == <span class="number">-1</span>:</span><br><span class="line">                                q.append(i)</span><br><span class="line">                                color[i] = <span class="number">1</span> - color[tmp]</span><br><span class="line">                                cnt[<span class="number">1</span> - color[tmp]] += <span class="number">1</span></span><br><span class="line">                            <span class="keyword">elif</span> color[i] == color[tmp]:</span><br><span class="line">                                check = <span class="keyword">False</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                ans += max(<span class="number">1</span>, min(cnt))</span><br><span class="line">        <span class="keyword">if</span> check:</span><br><span class="line">            print(ans)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2021&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2021&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;二分圖&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://summon528.github.io/tags/Python/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Bipartite" scheme="https://summon528.github.io/tags/Bipartite/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 10004 - Bicoloring</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-10004-Bicoloring/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-10004-Bicoloring/</id>
    <published>2018-01-01T10:37:42.000Z</published>
    <updated>2018-01-01T10:40:04.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=945" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=945</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>判斷二分圖<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, l;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v(n);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            v[a].push_back(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; color(n, <span class="number">-1</span>);</span><br><span class="line">        q.push(<span class="number">0</span>);</span><br><span class="line">        color[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; check) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[tmp].size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color[v[tmp][i]] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    q.push(v[tmp][i]);</span><br><span class="line">                    color[v[tmp][i]] = <span class="number">1</span> - color[tmp];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color[v[tmp][i]] == color[tmp]) &#123;</span><br><span class="line">                    check = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        check ? <span class="built_in">cout</span> &lt;&lt; <span class="string">"BICOLORABLE."</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">              : <span class="built_in">cout</span> &lt;&lt; <span class="string">"NOT BICOLORABLE."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=945&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=945&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;判斷二分圖&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Bipartite" scheme="https://summon528.github.io/tags/Bipartite/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 11060 - Beverages</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-11060-Beverages/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-11060-Beverages/</id>
    <published>2018-01-01T10:34:53.000Z</published>
    <updated>2018-01-01T10:35:46.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2001" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2001</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>拓樸排序 注意輸出順序是唯一的<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;g, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;ref,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path.size() == N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[x][i]) ref[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ref[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            path.push_back(i);</span><br><span class="line">            ref[i]--;</span><br><span class="line">            <span class="keyword">if</span> (dfs(i, path, g, ref, N)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            ref[i]++;</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[x][i]) ref[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, kase = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; um;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; graph(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ref(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            um[s] = i;</span><br><span class="line">            vs.push_back(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> M;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> a, b;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">if</span> (!graph[um[a]][um[b]]) &#123;</span><br><span class="line">                graph[um[a]][um[b]] = <span class="number">1</span>;</span><br><span class="line">                ref[um[b]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ref[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                ref[i]--;</span><br><span class="line">                path.push_back(i);</span><br><span class="line">                dfs(i, path, graph, ref, N);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase++</span><br><span class="line">             &lt;&lt; <span class="string">": Dilbert should drink beverages in this order:"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : path) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; vs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2001&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;拓樸排序 注意輸出順序是唯一的&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Topological Sort" scheme="https://summon528.github.io/tags/Topological-Sort/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 872 - Ordering</title>
    <link href="https://summon528.github.io/2018/01/01/UVA-872-Ordering/"/>
    <id>https://summon528.github.io/2018/01/01/UVA-872-Ordering/</id>
    <published>2018-01-01T10:32:09.000Z</published>
    <updated>2018-01-01T10:34:32.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=813" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=813</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>拓樸排序<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, graph, path, ref, ans, N)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ref[x] == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    ref[x] -= <span class="number">1</span></span><br><span class="line">    path.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(path) == N:</span><br><span class="line">        ans.append(list(map(<span class="keyword">lambda</span> x: chr(x + ord(<span class="string">'A'</span>)), path)))</span><br><span class="line">        ref[x] += <span class="number">1</span></span><br><span class="line">        path.pop()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(graph[x]):</span><br><span class="line">        <span class="keyword">if</span> item:</span><br><span class="line">            ref[idx] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(ref):</span><br><span class="line">        <span class="keyword">if</span> item == <span class="number">0</span>:</span><br><span class="line">            dfs(idx, graph, path, ref, ans, N)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(graph[x]):</span><br><span class="line">        <span class="keyword">if</span> item:</span><br><span class="line">            ref[idx] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    ref[x] += <span class="number">1</span></span><br><span class="line">    path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    T = int(input())</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(T):</span><br><span class="line">        input()</span><br><span class="line">        varss = list(map(<span class="keyword">lambda</span> x: ord(x) - ord(<span class="string">'A'</span>), input().split()))</span><br><span class="line">        graph = [[<span class="number">0</span>] * <span class="number">26</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">26</span>)]</span><br><span class="line">        ref = [<span class="number">-1</span>] * <span class="number">26</span></span><br><span class="line">        con = input().split()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> varss:</span><br><span class="line">            ref[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> con:</span><br><span class="line">            a = ord(i[<span class="number">0</span>]) - ord(<span class="string">'A'</span>)</span><br><span class="line">            b = ord(i[<span class="number">2</span>]) - ord(<span class="string">'A'</span>)</span><br><span class="line">            graph[a][b] = <span class="number">1</span></span><br><span class="line">            ref[b] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(ref):</span><br><span class="line">            <span class="keyword">if</span> item == <span class="number">0</span>:</span><br><span class="line">                dfs(idx, graph, [], ref, ans, len(varss))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t != <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ans:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">                print(*i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"NO"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=813&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=813&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;拓樸排序&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://summon528.github.io/tags/Python/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Topological Sort" scheme="https://summon528.github.io/tags/Topological-Sort/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 11953 - Battleships</title>
    <link href="https://summon528.github.io/2017/12/24/UVA-11953-Battleships/"/>
    <id>https://summon528.github.io/2017/12/24/UVA-11953-Battleships/</id>
    <published>2017-12-24T08:46:12.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3104" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3104</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>問還剩下幾艘船</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遇到x就DFS<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g[x][y] == <span class="string">'.'</span>) <span class="keyword">return</span>;</span><br><span class="line">    g[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    dfs(x + <span class="number">1</span>, y, g);</span><br><span class="line">    dfs(x, y + <span class="number">1</span>, g);</span><br><span class="line">    dfs(x, y - <span class="number">1</span>, g);</span><br><span class="line">    dfs(x - <span class="number">1</span>, y, g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= T; t++) &#123;</span><br><span class="line">        <span class="keyword">int</span> N;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; g;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        g.push_back(<span class="built_in">string</span>(N + <span class="number">2</span>, <span class="string">'.'</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            g.push_back(<span class="string">'.'</span> + s + <span class="string">'.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        g.push_back(<span class="built_in">string</span>(N + <span class="number">2</span>, <span class="string">'.'</span>));</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">'x'</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    dfs(i, j, g);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; t &lt;&lt; <span class="string">": "</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3104&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3104&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;問還剩下幾艘船&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;遇到x就DFS&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="Graph" scheme="https://summon528.github.io/tags/Graph/"/>
    
      <category term="DFS" scheme="https://summon528.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 11094 - Continents</title>
    <link href="https://summon528.github.io/2017/12/24/UVA-11094-Continents/"/>
    <id>https://summon528.github.io/2017/12/24/UVA-11094-Continents/</id>
    <published>2017-12-24T08:40:48.000Z</published>
    <updated>2018-01-01T10:15:50.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2035" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=2035</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>每個圖有兩種char，站著的那一點一定是陸地<br>問除了自己的那一塊之外，最大的一塊有多大<br>這個圖左右連通但上下不連通</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>DFS 看懂題目即可<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x, y, target, graph, visit, X, Y, M, N)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == X <span class="keyword">and</span> y == Y:</span><br><span class="line">        <span class="keyword">return</span> -math.inf</span><br><span class="line">    <span class="keyword">if</span> visit[x][y]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    visit[x][y] = <span class="keyword">True</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> graph[x + <span class="number">1</span>][y] == target:</span><br><span class="line">        cnt += dfs(x + <span class="number">1</span>, y, target, graph, visit, X, Y, M, N)</span><br><span class="line">    <span class="keyword">if</span> graph[x][(y + <span class="number">1</span>) % N] == target:</span><br><span class="line">        cnt += dfs(x, (y + <span class="number">1</span>) % N, target, graph, visit, X, Y, M, N)</span><br><span class="line">    <span class="keyword">if</span> graph[x][y - <span class="number">1</span> <span class="keyword">if</span> y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">else</span> N - <span class="number">1</span>] == target:</span><br><span class="line">        cnt += dfs(x, y - <span class="number">1</span> <span class="keyword">if</span> y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">else</span> N - <span class="number">1</span>,</span><br><span class="line">                   target, graph, visit, X, Y, M, N)</span><br><span class="line">    <span class="keyword">if</span> graph[x - <span class="number">1</span>][y] == target:</span><br><span class="line">        cnt += dfs(x - <span class="number">1</span>, y, target, graph, visit, X, Y, M, N)</span><br><span class="line">    <span class="keyword">return</span> cnt + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            M, N = map(int, input().split())</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        graph = []</span><br><span class="line">        graph.append(list(<span class="string">'$'</span> * N))</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">            graph.append(list(input()))</span><br><span class="line">        graph.append(list(<span class="string">'$'</span> * N))</span><br><span class="line">        vis = [[<span class="keyword">False</span>] * (N) <span class="keyword">for</span> _ <span class="keyword">in</span> range(M + <span class="number">2</span>)]</span><br><span class="line">        X, Y = map(int, input().split())</span><br><span class="line">        X += <span class="number">1</span></span><br><span class="line">        target = graph[X][Y]</span><br><span class="line">        Max = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, M + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> graph[i][j] == target <span class="keyword">and</span> <span class="keyword">not</span> vis[i][j]:</span><br><span class="line">                    Max = max(Max, dfs(i, j, target, graph, vis, X, Y, M, N))</span><br><span class="line">        print(Max)</span><br><span class="line">        input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2035&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=2035&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;每個圖有兩種char，站著的那一點一定是陸地&lt;br&gt;問除了自己的那一塊之外，最大的一塊有多大&lt;br&gt;這個圖左右連通但上下不連通&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;DFS 看懂題目即可&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://summon528.github.io/tags/Python/"/>
    
      <category term="Graph" scheme="https://summon528.github.io/tags/Graph/"/>
    
      <category term="DFS" scheme="https://summon528.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 1103 - Ancient Messages</title>
    <link href="https://summon528.github.io/2017/12/24/UVA-1103-Ancient-Messages/"/>
    <id>https://summon528.github.io/2017/12/24/UVA-1103-Ancient-Messages/</id>
    <published>2017-12-24T08:27:31.000Z</published>
    <updated>2018-01-01T10:15:50.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3544" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3544</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>識別每個圖案各有幾個</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>注意到每個圖案内的白色區塊分別是0~5個<br>先把16進位解壓成01二位陣列後（外面要包一圈0以保證背景聯通）<br>用BFS將背景都該成大便圖案💩<br>之後枚舉每個點，若是1則BFS將他們改成漢堡圖案🍔<br>在進行以上步驟的時候，如果遇到0則也把他們塗成大便並記錄數量<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs_fill</span><span class="params">(x, y, curr, change_to, graph, visit, bg=False)</span>:</span></span><br><span class="line">    dq = deque([(x, y)])</span><br><span class="line">    visit[x][y] = <span class="keyword">True</span></span><br><span class="line">    graph[x][y] = change_to</span><br><span class="line">    dxy = ((<span class="number">1</span>, <span class="number">-1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">-1</span>),</span><br><span class="line">           (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">-1</span>, <span class="number">-1</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        tmp = dq.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dxy:</span><br><span class="line">            tx = tmp[<span class="number">0</span>] + i[<span class="number">0</span>]</span><br><span class="line">            ty = tmp[<span class="number">1</span>] + i[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> graph[tx][ty] == curr <span class="keyword">and</span> <span class="keyword">not</span> visit[tx][ty]:</span><br><span class="line">                    graph[tx][ty] = change_to</span><br><span class="line">                    dq.append((tx, ty))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> bg <span class="keyword">and</span> graph[tx][ty] == <span class="string">'0'</span>:</span><br><span class="line">                    bfs_fill(tx, ty, <span class="string">'0'</span>, <span class="string">'💩'</span>, graph, visit)</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    kase = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        H, W = map(int, input().split())</span><br><span class="line">        <span class="keyword">if</span> H == <span class="number">0</span> <span class="keyword">and</span> W == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        W *= <span class="number">4</span></span><br><span class="line">        graph = []</span><br><span class="line">        visit = [[<span class="keyword">False</span>] * (W + <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(H + <span class="number">2</span>)]</span><br><span class="line">        graph.append(list(<span class="string">'0'</span> * (W + <span class="number">2</span>)))</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(H):</span><br><span class="line">            graph.append(list(<span class="string">'0'</span> + str(bin(int(input(), <span class="number">16</span>))</span><br><span class="line">                                        [<span class="number">2</span>:].rjust(W, <span class="string">'0'</span>)) + <span class="string">'0'</span>))</span><br><span class="line"></span><br><span class="line">        graph.append(list(<span class="string">'0'</span> * (W + <span class="number">2</span>)))</span><br><span class="line">        bfs_fill(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'0'</span>, <span class="string">'💩'</span>, graph, visit, <span class="keyword">True</span>)</span><br><span class="line">        cnt = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(H + <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(W + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> graph[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    cnt[bfs_fill(i, j, <span class="string">'1'</span>, <span class="string">'🍔'</span>, graph, visit)] += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"Case &#123;&#125;: &#123;&#125;"</span>.format(kase,</span><br><span class="line">                                   <span class="string">'A'</span> * cnt[<span class="number">1</span>] + <span class="string">'D'</span> * cnt[<span class="number">5</span>] +</span><br><span class="line">                                   <span class="string">'J'</span> * cnt[<span class="number">3</span>] + <span class="string">'K'</span> * cnt[<span class="number">2</span>] +</span><br><span class="line">                                   <span class="string">'S'</span> * cnt[<span class="number">4</span>] + <span class="string">'W'</span> * cnt[<span class="number">0</span>]))</span><br><span class="line">        kase += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3544&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3544&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;識別每個圖案各有幾個&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;注意到每個圖案内的白色區塊分別是0~5個&lt;br&gt;先把16進位解壓成01二位陣列後（外面要包一圈0以保證背景聯通）&lt;br&gt;用BFS將背景都該成大便圖案💩&lt;br&gt;之後枚舉每個點，若是1則BFS將他們改成漢堡圖案🍔&lt;br&gt;在進行以上步驟的時候，如果遇到0則也把他們塗成大便並記錄數量&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://summon528.github.io/tags/Python/"/>
    
      <category term="Graph" scheme="https://summon528.github.io/tags/Graph/"/>
    
      <category term="BFS" scheme="https://summon528.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 12442 - Forwarding Emails</title>
    <link href="https://summon528.github.io/2017/12/24/UVA-12442-Forwarding-Emails/"/>
    <id>https://summon528.github.io/2017/12/24/UVA-12442-Forwarding-Emails/</id>
    <published>2017-12-24T08:03:38.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3873" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3873</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>每個人收到郵件都會傳給另一個人<br>問傳給哪一個人可以讓最多人看到</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因爲每一個人都衹會傳給一個人<br>所以整個是一個鏈子的結構<br>先從第一個點開始並記錄從該點開始會經過的點<br>（另外記錄，不要把這個跟dfs時用的陣列搞混了）<br>再來枚舉所有點 若該點之前走過代表他一定是前面某次的子鏈 就不需要再dfs一次了<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= T; t++) &#123;</span><br><span class="line">        <span class="keyword">int</span> N;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            u--, v--;</span><br><span class="line">            adj[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>, Maxp = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; best_v(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (best_v[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visited(N);</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">            st.push_back(i);</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            best_v[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = st.back();</span><br><span class="line">                st.pop_back();</span><br><span class="line">                <span class="keyword">if</span> (!visited[adj[tmp]]) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    visited[adj[tmp]] = <span class="literal">true</span>;</span><br><span class="line">                    best_v[adj[tmp]] = <span class="literal">true</span>;</span><br><span class="line">                    st.push_back(adj[tmp]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt; Max) &#123;</span><br><span class="line">                Max = cnt;</span><br><span class="line">                Maxp = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; t &lt;&lt; <span class="string">": "</span> &lt;&lt; Maxp + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3873&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3873&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;每個人收到郵件都會傳給另一個人&lt;br&gt;問傳給哪一個人可以讓最多人看到&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;因爲每一個人都衹會傳給一個人&lt;br&gt;所以整個是一個鏈子的結構&lt;br&gt;先從第一個點開始並記錄從該點開始會經過的點&lt;br&gt;（另外記錄，不要把這個跟dfs時用的陣列搞混了）&lt;br&gt;再來枚舉所有點 若該點之前走過代表他一定是前面某次的子鏈 就不需要再dfs一次了&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 11906 - Knight in a War Grid</title>
    <link href="https://summon528.github.io/2017/12/24/UVA-11906-Knight-in-a-War-Grid/"/>
    <id>https://summon528.github.io/2017/12/24/UVA-11906-Knight-in-a-War-Grid/</id>
    <published>2017-12-24T07:24:44.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3057" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3057</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>騎士從(0,0)出發，每次走$(\pm N,\pm M)$或$(\pm M,\pm N)$共八種走發<br>不能走到水上，走到一個點記錄該點能走到的點是奇數個還是偶數個</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>DFS搜尋<br>不過要注意如果N == M或N跟M其中一個是零，有可能會重複算到<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;dx, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;dy, <span class="keyword">int</span> R, <span class="keyword">int</span> C,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; &amp;g, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; &amp;visited, <span class="keyword">int</span> &amp;even,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> &amp;odd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; se;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x + dx[i] &lt; R &amp;&amp; x + dx[i] &gt;= <span class="number">0</span> &amp;&amp; y + dy[i] &lt; C &amp;&amp;</span><br><span class="line">            y + dy[i] &gt;= <span class="number">0</span> &amp;&amp; !g[x + dx[i]][y + dy[i]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (se.count(make_pair(x + dx[i], y + dy[i])) == <span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                se.insert(make_pair(x + dx[i], y + dy[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(x + dx[i], y + dy[i], dx, dy, R, C, g, visited, even, odd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x + dy[i] &lt; R &amp;&amp; x + dy[i] &gt;= <span class="number">0</span> &amp;&amp; y + dx[i] &lt; C &amp;&amp;</span><br><span class="line">            y + dx[i] &gt;= <span class="number">0</span> &amp;&amp; !g[x + dy[i]][y + dx[i]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (se.count(make_pair(x + dy[i], y + dx[i])) == <span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                se.insert(make_pair(x + dy[i], y + dx[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(x + dy[i], y + dx[i], dy, dx, R, C, g, visited, even, odd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt % <span class="number">2</span> ? odd++ : even++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= T; t++) &#123;</span><br><span class="line">        <span class="keyword">int</span> R, C, M, N, W;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; R &gt;&gt; C &gt;&gt; M &gt;&gt; N;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; g(R, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(C));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; visited(R, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(C));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dx = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, dy = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) dx[i] *= M, dy[i] *= N;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; W;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            g[x][y] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>, odd = <span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, dx, dy, R, C, g, visited, even, odd);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; t &lt;&lt; <span class="string">": "</span> &lt;&lt; even &lt;&lt; <span class="string">' '</span> &lt;&lt; odd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3057&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;騎士從(0,0)出發，每次走$(\pm N,\pm M)$或$(\pm M,\pm N)$共八種走發&lt;br&gt;不能走到水上，走到一個點記錄該點能走到的點是奇數個還是偶數個&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;DFS搜尋&lt;br&gt;不過要注意如果N == M或N跟M其中一個是零，有可能會重複算到&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Graph" scheme="https://summon528.github.io/tags/Graph/"/>
    
      <category term="DFS" scheme="https://summon528.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 1449 - Dominating Patterns</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-1449-Dominating-Patterns/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-1449-Dominating-Patterns/</id>
    <published>2017-12-23T10:32:54.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;Itemid=8&amp;category=24&amp;page=show_problem&amp;problem=4195" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;Itemid=8&amp;category=24&amp;page=show_problem&amp;problem=4195</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>問每個pattern在文本出現的次數</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>AC自動機 寫一下就AC了<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chr2int</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isupper</span>(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'A'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt;</span><br><span class="line">    <span class="keyword">int</span> fail, str_idx, hit;</span><br><span class="line">    node() &#123;</span><br><span class="line">        nxt.resize(<span class="number">52</span>, <span class="number">-1</span>);</span><br><span class="line">        fail = hit = <span class="number">-1</span>;</span><br><span class="line">        str_idx = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_trie</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> str_idx, <span class="built_in">vector</span>&lt;node&gt; &amp;trie, <span class="keyword">int</span> &amp;node_cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (trie[cur].nxt[chr2int(i)] == <span class="number">-1</span>) &#123;</span><br><span class="line">            trie[cur].nxt[chr2int(i)] = ++node_cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = trie[cur].nxt[chr2int(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    trie[cur].str_idx = str_idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">(<span class="built_in">vector</span>&lt;node&gt; &amp;trie)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; N;</span><br><span class="line">    N.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!N.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = N.front();</span><br><span class="line">        N.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie[p].nxt[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> bk = trie[p].fail;</span><br><span class="line">                <span class="keyword">while</span> (bk != <span class="number">-1</span> &amp;&amp; trie[bk].nxt[i] == <span class="number">-1</span>) bk = trie[bk].fail;</span><br><span class="line">                <span class="keyword">if</span> (bk != <span class="number">-1</span>) &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].fail = trie[bk].nxt[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> r = trie[trie[p].nxt[i]].fail;</span><br><span class="line">                <span class="keyword">if</span> (trie[r].str_idx != <span class="number">-1</span>) &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].hit = r;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].hit = trie[r].hit;</span><br><span class="line">                &#125;</span><br><span class="line">                N.push(trie[p].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;node&gt; &amp;trie, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;found)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="number">-1</span> &amp;&amp; trie[p].nxt[chr2int(i)] == <span class="number">-1</span>) p = trie[p].fail;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="number">-1</span>) &#123;</span><br><span class="line">            p = trie[p].nxt[chr2int(i)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> bk = p; bk != <span class="number">-1</span>; bk = trie[bk].hit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie[bk].str_idx != <span class="number">-1</span>) &#123;</span><br><span class="line">                found[trie[bk].str_idx] += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span>) p = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N, N) &#123;</span><br><span class="line">        <span class="keyword">int</span> node_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">vector</span>&lt;node&gt; trie;</span><br><span class="line">        trie.resize(<span class="number">1000005</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; equv(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            vs.push_back(tmp);</span><br><span class="line">            build_trie(tmp, i, trie, node_cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        build_ac(trie);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; found(N);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        match(s, trie, found);</span><br><span class="line">        <span class="keyword">int</span> Max = *max_element(begin(found), end(found));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (found[i] == Max) <span class="built_in">cout</span> &lt;&lt; vs[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=4195&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=4195&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;問每個pattern在文本出現的次數&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;AC自動機 寫一下就AC了&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Aho–Corasick" scheme="https://summon528.github.io/tags/Aho%E2%80%93Corasick/"/>
    
      <category term="AC自動機" scheme="https://summon528.github.io/tags/AC%E8%87%AA%E5%8B%95%E6%A9%9F/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 10679 - I Love Strings!!</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-10679-I-Love-Strings/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-10679-I-Love-Strings/</id>
    <published>2017-12-23T10:30:14.000Z</published>
    <updated>2018-01-01T10:15:50.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;category=24&amp;page=show_problem&amp;problem=1620" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;category=24&amp;page=show_problem&amp;problem=1620</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>給定一個字串和一些pattern<br>問每個pattern有沒有出現在字串裡面</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>好像隨便寫都會過<br>不過我練習一下ac自動機<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chr2int</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isupper</span>(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'A'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt;</span><br><span class="line">    <span class="keyword">int</span> fail, str_idx, hit;</span><br><span class="line">    node() &#123;</span><br><span class="line">        nxt.resize(<span class="number">52</span>, <span class="number">-1</span>);</span><br><span class="line">        fail = hit = <span class="number">-1</span>;</span><br><span class="line">        str_idx = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_trie</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> str_idx, <span class="built_in">vector</span>&lt;node&gt; &amp;trie, <span class="keyword">int</span> &amp;node_cnt,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;equv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (trie[cur].nxt[chr2int(i)] == <span class="number">-1</span>) &#123;</span><br><span class="line">            trie[cur].nxt[chr2int(i)] = ++node_cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = trie[cur].nxt[chr2int(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trie[cur].str_idx != <span class="number">-1</span>) &#123;</span><br><span class="line">        equv[str_idx] = trie[cur].str_idx;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        trie[cur].str_idx = str_idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">(<span class="built_in">vector</span>&lt;node&gt; &amp;trie)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie[p].nxt[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> bk = trie[p].fail;</span><br><span class="line">                <span class="keyword">while</span> (bk != <span class="number">-1</span> &amp;&amp; trie[bk].nxt[i] == <span class="number">-1</span>) bk = trie[bk].fail;</span><br><span class="line">                <span class="keyword">if</span> (bk != <span class="number">-1</span>) &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].fail = trie[bk].nxt[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> r = trie[trie[p].nxt[i]].fail;</span><br><span class="line">                <span class="keyword">if</span> (trie[r].str_idx != <span class="number">-1</span>) &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].hit = r;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    trie[trie[p].nxt[i]].hit = trie[r].hit;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(trie[p].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;node&gt; &amp;trie, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;found)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : s) &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="number">-1</span> &amp;&amp; trie[p].nxt[chr2int(i)] == <span class="number">-1</span>) p = trie[p].fail;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="number">-1</span>) &#123;</span><br><span class="line">            p = trie[p].nxt[chr2int(i)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> bk = p; bk != <span class="number">-1</span>; bk = trie[bk].hit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie[bk].str_idx != <span class="number">-1</span>) &#123;</span><br><span class="line">                found[trie[bk].str_idx] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span>) p = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> node_cnt = <span class="number">0</span>, q;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">vector</span>&lt;node&gt; trie;</span><br><span class="line">        trie.resize(<span class="number">1000005</span>);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; equv(q, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            build_trie(tmp, i, trie, node_cnt, equv);</span><br><span class="line">        &#125;</span><br><span class="line">        build_ac(trie);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; found(q);</span><br><span class="line">        match(s, trie, found);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (found[i] || (equv[i] != <span class="number">-1</span> &amp;&amp; found[equv[i]])) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"y\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"n\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=1620&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=1620&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;給定一個字串和一些pattern&lt;br&gt;問每個pattern有沒有出現在字串裡面&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;好像隨便寫都會過&lt;br&gt;不過我練習一下ac自動機&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Aho–Corasick" scheme="https://summon528.github.io/tags/Aho%E2%80%93Corasick/"/>
    
      <category term="AC自動機" scheme="https://summon528.github.io/tags/AC%E8%87%AA%E5%8B%95%E6%A9%9F/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 11831 - Sticker Collector Robot</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-11831-Sticker-Collector-Robot/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-11831-Sticker-Collector-Robot/</id>
    <published>2017-12-23T10:27:42.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;category=24&amp;page=show_problem&amp;problem=2931" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;category=24&amp;page=show_problem&amp;problem=2931</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>照著模擬即可<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stloutput.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M, S;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; S, N | M | S) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; graph(N + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(M + <span class="number">2</span>, <span class="string">'#'</span>));</span><br><span class="line">        <span class="keyword">char</span> dir;</span><br><span class="line">        <span class="keyword">int</span> cx, cy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>.ignore();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; j++) &#123;</span><br><span class="line">                graph[i][j] = <span class="built_in">cin</span>.get();</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isalpha</span>(graph[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (graph[i][j] == <span class="string">'N'</span>) &#123;</span><br><span class="line">                        dir = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (graph[i][j] == <span class="string">'S'</span>) &#123;</span><br><span class="line">                        dir = <span class="number">2</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (graph[i][j] == <span class="string">'L'</span>) &#123;</span><br><span class="line">                        dir = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (graph[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                        dir = <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cx = i, cy = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>.ignore();</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (c = <span class="built_in">cin</span>.get(), c != <span class="string">'\n'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'F'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (graph[cx + dx[dir]][cy + dy[dir]] != <span class="string">'#'</span>) &#123;</span><br><span class="line">                    graph[cx][cy] = <span class="string">'.'</span>;</span><br><span class="line">                    cx += dx[dir];</span><br><span class="line">                    cy += dy[dir];</span><br><span class="line">                    <span class="keyword">if</span> (graph[cx][cy] == <span class="string">'*'</span>) ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'D'</span>) &#123;</span><br><span class="line">                dir++;</span><br><span class="line">                dir %= <span class="number">4</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'E'</span>) &#123;</span><br><span class="line">                dir--;</span><br><span class="line">                <span class="keyword">if</span> (dir == <span class="number">-1</span>) dir = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=2931&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=2931&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;照著模擬即可&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 12149 - Feynman</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-12149-Feynman/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-12149-Feynman/</id>
    <published>2017-12-23T10:23:19.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3301" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=3301</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>問n*n的正方形有幾個小正方形</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>答案就是 $n\times n+(n-1)\times(n-1)+(n-2)\times(n-2)…$<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; T, T) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line">            ans += i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=3301&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;問n*n的正方形有幾個小正方形&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;答案就是 $n\times n+(n-1)\times(n-1)+(n-2)\times(n-2)…$&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 10074 - Take the Land</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-10074-Take-the-Land/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-10074-Take-the-Land/</id>
    <published>2017-12-23T10:18:27.000Z</published>
    <updated>2018-01-01T10:15:50.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=1015" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=1015</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>問最大都是0的矩形</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>枚舉開始列跟結束列，壓成一維後算<br>參見<a href="/2017/11/22/UVA-108-Maximum-Sum/">UVA 108</a><br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m,n|m)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;g[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++)&#123;</span><br><span class="line">                    dp[k] += g[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, Max_cnt = <span class="number">-1000000000</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[k] == <span class="number">0</span>) &#123;cnt++;Max_cnt = max(Max_cnt, cnt);&#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Max_cnt = max(Max_cnt, cnt);</span><br><span class="line">                        cnt = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Max = max(Max, Max_cnt*(j-i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Max&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1015&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1015&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;問最大都是0的矩形&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;枚舉開始列跟結束列，壓成一維後算&lt;br&gt;參見&lt;a href=&quot;/2017/11/22/UVA-108-Maximum-Sum/&quot;&gt;UVA 108&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="DP" scheme="https://summon528.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 10700 - Camel trading</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-10700-Camel-trading/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-10700-Camel-trading/</id>
    <published>2017-12-23T10:15:12.000Z</published>
    <updated>2018-01-01T10:15:50.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=1641" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=1641</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>給一個只有加和乘的算式，<br>可以隨意加括弧，問最大和最小的可能分別是多少</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>最大就是先算加再算乘<br>最小就是先算乘再算加<br>記得long long<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt; Max;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                    tmp = (s[i] - <span class="string">'0'</span>) * <span class="number">10</span> + (s[i + <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    tmp = (s[i] - <span class="string">'0'</span>);</span><br><span class="line">                Max.push_back(tmp);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'+'</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> tmp = Max.back(), tmp2;</span><br><span class="line">                Max.pop_back();</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= s.length()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                    tmp2 = (s[i] - <span class="string">'0'</span>) * <span class="number">10</span> + (s[i + <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    tmp2 = (s[i] - <span class="string">'0'</span>);</span><br><span class="line">                tmp += tmp2;</span><br><span class="line">                Max.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt; Min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                    tmp = (s[i] - <span class="string">'0'</span>) * <span class="number">10</span> + (s[i + <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    tmp = (s[i] - <span class="string">'0'</span>);</span><br><span class="line">                Min.push_back(tmp);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> tmp = Min.back(), tmp2;</span><br><span class="line">                Min.pop_back();</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= s.length()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                    tmp2 = (s[i] - <span class="string">'0'</span>) * <span class="number">10</span> + (s[i + <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    tmp2 = (s[i] - <span class="string">'0'</span>);</span><br><span class="line">                tmp *= tmp2;</span><br><span class="line">                Min.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> Min_s = <span class="number">0</span>, Max_s = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max.size(); i++) Max_s *= Max[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Min.size(); i++) Min_s += Min[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The maximum and minimum are "</span> &lt;&lt; Max_s &lt;&lt; <span class="string">" and "</span> &lt;&lt; Min_s</span><br><span class="line">             &lt;&lt; <span class="string">'.'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1641&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1641&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;給一個只有加和乘的算式，&lt;br&gt;可以隨意加括弧，問最大和最小的可能分別是多少&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;最大就是先算加再算乘&lt;br&gt;最小就是先算乘再算加&lt;br&gt;記得long long&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Greedy" scheme="https://summon528.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 382 - Perfection</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-382-Perfection/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-382-Perfection/</id>
    <published>2017-12-23T10:10:32.000Z</published>
    <updated>2018-01-01T10:15:50.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=318" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=318</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>給定一個數字，問該數字除了自己以外的因數加總後比自己大、小、還是等於</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>隨便亂做<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"PERFECTION OUTPUT"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n, n)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">5</span>)&lt;&lt;n&lt;&lt;<span class="string">"  "</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ans += i;</span><br><span class="line">                <span class="keyword">if</span> (ans &gt; n) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == n)<span class="built_in">cout</span>&lt;&lt;<span class="string">"PERFECT"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ans  &gt; n) <span class="built_in">cout</span>&lt;&lt;<span class="string">"ABUNDANT"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"DEFICIENT"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"END OF OUTPUT"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=318&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=318&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;給定一個數字，問該數字除了自己以外的因數加總後比自己大、小、還是等於&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;隨便亂做&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>[UVA] 10042 - Smith Numbers</title>
    <link href="https://summon528.github.io/2017/12/23/UVA-10042-Smith-Numbers/"/>
    <id>https://summon528.github.io/2017/12/23/UVA-10042-Smith-Numbers/</id>
    <published>2017-12-23T10:04:03.000Z</published>
    <updated>2018-01-01T10:15:50.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h3><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=983" target="_blank" rel="noopener">https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;page=show_problem&amp;problem=983</a></p><h3 id="題意"><a href="#題意" class="headerlink" title="題意"></a>題意</h3><p>Smith Numbers的定義是<br>一個數字x的每個質因數的每個位數加總等於x本身每個位數加總<br>給定一個數字，問比該數大且不是質數的Smith Numbers　　</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>就。。。照著做<br>注意的是每個數字的質因數只會有一個大於$\sqrt{x}$<br>所以可以作到根號再檢查剩下的就好<br><a id="more"></a></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">primeq</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;isprime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;prime)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">40000</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isprime[x]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; prime.size() &amp;&amp; x &gt; prime[j]*prime[j]; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x % prime[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digadd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)&#123;</span><br><span class="line">        sum+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; isprime(<span class="number">40000</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">40000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isprime[i])&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i*i; j &lt; <span class="number">40000</span>; j+=i)&#123;</span><br><span class="line">                isprime[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">2</span>; i &lt; <span class="number">40000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isprime[i]) prime.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n+<span class="number">1</span>;;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!primeq(i,isprime,prime))&#123;</span><br><span class="line">                <span class="keyword">int</span> a = digadd(i),b = <span class="number">0</span>, x = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; prime.size();j++)&#123;</span><br><span class="line">                    <span class="keyword">while</span> (x%prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                        b+=digadd(prime[j]);</span><br><span class="line">                        x/=prime[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x!=<span class="number">1</span>) b+= digadd(x);</span><br><span class="line">                <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=983&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=983&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意&quot;&gt;&lt;/a&gt;題意&lt;/h3&gt;&lt;p&gt;Smith Numbers的定義是&lt;br&gt;一個數字x的每個質因數的每個位數加總等於x本身每個位數加總&lt;br&gt;給定一個數字，問比該數大且不是質數的Smith Numbers　　&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;就。。。照著做&lt;br&gt;注意的是每個數字的質因數只會有一個大於$\sqrt{x}$&lt;br&gt;所以可以作到根號再檢查剩下的就好&lt;br&gt;
    
    </summary>
    
    
      <category term="Cpp" scheme="https://summon528.github.io/tags/Cpp/"/>
    
      <category term="UVA" scheme="https://summon528.github.io/tags/UVA/"/>
    
      <category term="Prime" scheme="https://summon528.github.io/tags/Prime/"/>
    
  </entry>
  
</feed>
